id: lora_sdr_frame_detector_timeout
label: Frame detector timeout
category: "[LoRa]/CRAN"
flags: [python, cpp]

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)

templates:
  imports: import lora_sdr
  make: lora_sdr.frame_detector_timeout(${sf},${samp_rate},${bw},${n_bytes})

cpp_templates:
  includes: ["#include <lora_sdr/frame_detector_timeout.h>"]
  declarations: "lora_sdr::frame_detector_timeout::sptr ${id};"
  make: "this->${id} = lora_sdr::frame_detector_timeout:make(${sf},${samp_rate},${bw},${n_bytes});"
  link: ["gnuradio-lora_sdr"]

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
  - id: sf
    label: Spreading Factor
    dtype: int
  - id: samp_rate
    label: Sampling rate
    dtype: int
  - id: bw
    label: Bandwith
    dtype: int
  - id: n_bytes
    label: Number of bytes
    dtype: int
    default: 55

asserts:
  - ${ sf ==7 or sf == 8 or sf ==9 or sf == 10 or sf == 11 or sf ==12 }
  - ${n_bytes >0}

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
  - domain: stream
    dtype: complex

outputs:
  - domain: stream
    dtype: complex

documentation: |-
  Only lets LoRa frames pass this block.
      Parameters:
          sf: spreading factor
          threshold: thresshold value to use
      Input:
          in: stream of complex samples
      Output:
          out: stream of complex samples

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
