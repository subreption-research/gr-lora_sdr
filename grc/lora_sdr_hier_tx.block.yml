id: lora_sdr_hier_tx
label: Tx_chain
category: '[LoRa]'
flags: [python, cpp]

templates:
  imports: import lora_sdr
  make: lora_sdr.hier_tx(${pay_len}, ${n_frames}, ${src_data},
                        ${cr}, ${sf}, ${impl_head},${has_crc},
                           ${samp_rate}, ${bw}, ${mean}, ${multi_control})
cpp_templates: 
     includes: ['#include <lora_sdr/hier_tx.h>'] 
     declarations: 'lora_sdr::hier_tx::sptr ${id};' 
     make: 'this->${id} = lora_sdr::hier_tx::make(${pay_len}, ${n_frames}, ${src_data},
                        ${cr}, ${sf}, ${impl_head},${has_crc},
                           ${samp_rate}, ${bw}, ${mean}, ${multi_control});' 


#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
-   id: sf
    label: Sf
    dtype: int
-   id: samp_rate
    label: Samp_rate
    dtype: int
-   id: bw
    label: Bw
    dtype: int
-   id: has_crc
    label: Has_crc
    dtype: bool
    default: 'False'
-   id: pay_len
    label: Pay_len
    dtype: int
-   id: n_frames
    label: N_frames
    dtype: int
-   id: src_data
    label: Input string
    dtype: string
    default : ''
-   id: cr
    label: Cr
    dtype: int
-   id: sf
    label: Sf
    dtype: int
-   id: impl_head
    label: Impl_head
    dtype: bool
-   id: mean
    label: Mean time (ms)
    dtype: int
    default : 200
-   id: multi_control
    label : Multi control mode
    dtype : bool
    default : False

asserts:
-   ${ sf ==7 or sf == 8 or sf ==9 or sf == 10 or sf == 11 or sf ==12 }
-   ${ cr ==0 or cr ==2 or cr ==3 or cr ==4 }
-   ${ mean > 1}


#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:

outputs:
-   domain: stream
    dtype: complex

documentation: |-
    Wrapper block that hold the entire Tx chain :
    (data source, whitening, add_header, add_crc, hamming_enc, interleaver, gray mapping, modulate, multi_control)
    Output:
        out : stream of complex valued samples

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
